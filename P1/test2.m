function[] = test2()
% Projekt 1, zadanie 01, test 2
% Vlada Gromova, 323770

text = "Sprawdzenie rzędów zaimplementowanych metod za pomocą h " + ...
    "(odległość między punktami), gdzie h = (b-a)/n. \nZaimplemento" + ...
    "wane metody powinny być 2-go rzędu (zmodyfikowana metoda Eulera" + ...
    " i metoda Adamsa-Moultona 2-go rzędu), więc przy zwiększeniu n " + ...
    "10 razy, błąd powinien się zmniejszyc 10^2 = 100 razy.\n\n";
fprintf(text);
format shortEng

n = 90;
[resAM,resEul] = P1Z01_VGR_rozniczk(1,5,n,1,20,@(x) 1, @(x) 0, ...
    @(x) 3*x^2);
fprintf("n = %d\n",n);
fprintf("Błąd wyniku uzyskanego za pomocą metody Adamsa-Moultona:" + ...
    "\t   %d \n",abs(125 - resAM(n+1)));
fprintf("Błąd wyniku uzyskanego za pomocą zmodyfikowanej metody" + ...
    " Eulera: %d \n\n",abs(125 - resEul(n+1)));

n = n*10;
[resAM,resEul] = P1Z01_VGR_rozniczk(1,5,n,1,20,@(x) 1,@(x) 0,@(x) 3*x^2);
fprintf("n = %d\n",n);
fprintf("Błąd wyniku uzyskanego za pomocą metody Adamsa-Moultona:" + ...
    "\t   %d \n",abs(125 - resAM(n+1)));
fprintf("Błąd wyniku uzyskanego za pomocą zmodyfikowanej metody" + ...
    " Eulera: %d \n\n",abs(125 - resEul(n+1)));

n = n*10;
[resAM,resEul] = P1Z01_VGR_rozniczk(1,5,n,1,20,@(x) 1,@(x) 0,@(x) 3*x^2);
fprintf("n = %d\n",n);
fprintf("Błąd wyniku uzyskanego za pomocą metody Adamsa-Moultona:" + ...
    "\t   %d \n",abs(125 - resAM(n+1)));
fprintf("Błąd wyniku uzyskanego za pomocą zmodyfikowanej metody " + ...
    "Eulera: %d \n\n",abs(125 - resEul(n+1)));
pause;

n = 90;
fprintf("Zmienimy równanie:\n");
[resAM, resEul] = P1Z01_VGR_rozniczk(0,1,n,[1;1], 5,@(x) 1, @(x) 0, ...
    @(x) -1, @(x) 0);
fprintf("n = %d\n",n);
fprintf("Błąd wyniku uzyskanego za pomocą metody Adamsa-Moultona:" + ...
    "\t   %d \n",abs(exp(1) - resAM(n+1)));
fprintf("Błąd wyniku uzyskanego za pomocą zmodyfikowanej metody" + ...
    " Eulera: %d \n\n",abs(exp(1) - resEul(n+1)));

n=n*10;
[resAM, resEul] = P1Z01_VGR_rozniczk(0,1,n,[1;1], 5,@(x) 1, @(x) 0, ...
    @(x) -1, @(x) 0);
fprintf("n = %d\n",n);
fprintf("Błąd wyniku uzyskanego za pomocą metody Adamsa-Moultona:" + ...
    "\t   %d \n",abs(exp(1) - resAM(n+1)));
fprintf("Błąd wyniku uzyskanego za pomocą zmodyfikowanej metody" + ...
    " Eulera: %d \n\n",abs(exp(1) - resEul(n+1)));

n=n*10;
[resAM, resEul] = P1Z01_VGR_rozniczk(0,1,n,[1;1], 5,@(x) 1, @(x) 0, ...
    @(x) -1, @(x) 0);
fprintf("n = %d\n",n);
fprintf("Błąd wyniku uzyskanego za pomocą metody Adamsa-Moultona:" + ...
    "\t   %d \n",abs(exp(1) - resAM(n+1)));
fprintf("Błąd wyniku uzyskanego za pomocą zmodyfikowanej metody" + ...
    " Eulera: %d \n\n",abs(exp(1) - resEul(n+1)));
pause;

n = 90;
fprintf("Zmienimy równanie:\n");
[resAM, resEul] = P1Z01_VGR_rozniczk(1,2,n,[2;10], 5 ,@(x) x, @(x) -1, ...
    @(x) 2, @(x) (30*x^4 + 4*x^5));
fprintf("n = %d\n",n);
fprintf("Błąd wyniku uzyskanego za pomocą metody Adamsa-Moultona:" + ...
    "\t   %d \n",abs(64 - resAM(n+1)));
fprintf("Błąd wyniku uzyskanego za pomocą zmodyfikowanej metody" + ...
    " Eulera: %d \n\n",abs(64 - resEul(n+1)));

n=n*10;
[resAM, resEul] = P1Z01_VGR_rozniczk(1,2,n,[2;10], 5 ,@(x) x, @(x) -1, ...
    @(x) 2, @(x) (30*x^4 + 4*x^5));
fprintf("n = %d\n",n);
fprintf("Błąd wyniku uzyskanego za pomocą metody Adamsa-Moultona:" + ...
    "\t   %d \n",abs(64 - resAM(n+1)));
fprintf("Błąd wyniku uzyskanego za pomocą zmodyfikowanej metody" + ...
    " Eulera: %d \n\n",abs(64 - resEul(n+1)));

n=n*10;
[resAM, resEul] = P1Z01_VGR_rozniczk(1,2,n,[2;10], 5 ,@(x) x, @(x) -1, ...
    @(x) 2, @(x) (30*x^4 + 4*x^5));
fprintf("n = %d\n",n);
fprintf("Błąd wyniku uzyskanego za pomocą metody Adamsa-Moultona:" + ...
    "\t   %d \n",abs(64 - resAM(n+1)));
fprintf("Błąd wyniku uzyskanego za pomocą zmodyfikowanej metody" + ...
    " Eulera: %d \n\n",abs(64 - resEul(n+1)));